class Solution {
public:
    vector<string> anagrams(vector<string> &strs) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        std::map<std::string,bool> mapString;
        vector<string> ordStrs;
        std::string ordStr;
        for (int i=0; i<strs.size(); i++) {
            ordStr = inOrder(strs[i]);
            ordStrs.push_back(ordStr);
            std::map<std::string,bool>::iterator it = mapString.find(ordStr);
            if (it != mapString.end()) {
                mapString[ordStr] = true;
            } else {
                mapString.insert(std::pair<std::string, bool>(ordStr,false));
                //mapOrd.insert(std::pari<int,std::string>(i, ordStr));
            }
        }
        vector<string> resultStrs;
        for (int i=0; i<strs.size(); i++) {
            if (mapString[ordStrs[i]]) {
                resultStrs.push_back(strs[i]);
            }
        }
        return resultStrs;
    }
    
private:
    std::string inOrder(std::string &str) {
        int alpha[30];
        memset(alpha,0,sizeof(int)*30);
        for (int i=0; i<str.size(); i++) {
            alpha[str[i]-'a'] ++;
        }
        std::string resultStr;
        for (int i=0; i<30; i++) {
            for (int j=0; j<alpha[i]; j++) {
                resultStr.push_back(i+'a');
            }
        }
        return resultStr;
    }
};
