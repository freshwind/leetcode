class Solution {
public:
    vector<vector<int> > permute(vector<int> &num) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        vector<vector<int> > solutions;
        if(num.size()<=0) return solutions;
        
        vector<int> s;
        vector<bool> used(num.size(), false);
        recursion(solutions, s, num, used);
        return solutions;
    }
    
    void recursion(vector<vector<int> > &solutions, vector<int> &s, vector<int> &num, vector<bool> &used) {
        if (s.size() == used.size()) {
            solutions.push_back(s);
            return;
        }
        for(int i=0; i<used.size(); i++) {
            if (!used[i]) {
                s.push_back(num[i]);
                used[i] = true;
                recursion(solutions, s, num, used);
                used[i] = false;
                s.pop_back();                
            }
        }
    }
};
