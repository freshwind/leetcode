class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) {
        vector<vector<int> > result;
        if (num.size() < 3) {
            return result;
        }
        //sort
        fastSort(num, 0, num.size() - 1);
        
        //check
        for (int i = 0; i < num.size()-2; i++) {
            if (i==0 || num[i] != num[i-1]) {
                int small = i+1;
                int large = num.size()-1;
                while (small < large) {
                    if (num[small] + num[large] + num[i] > 0) {
                        large--;
                    } else if (num[small] + num[large] + num[i] < 0) {
                        small++;
                    } else {
                        int temp_solu[] = {num[i], num[small], num[large]};
                        vector<int> solu(temp_solu, temp_solu + sizeof(temp_solu)/sizeof(int));
                        result.push_back(solu);
                        while(num[++small] == num[small-1] && small < large);
                        while(num[--large] == num[large+1] && small < large);
                    }
                }
            }
        }
        return result;
    }
    
    void fastSort(vector<int> &num, int n, int m) {
        int small = n-1;
        int temp;
        for (int i = n; i < m; i++) {
            if (num[i] < num[m]) {
                small++;
                swap(num[small], num[i]);
            }
        }
        swap(num[m], num[small+1]);
        if (small - n > 0) {
            fastSort(num, n, small);
        }
        if (m - small > 2) {
            fastSort(num, small+2, m);
        }
    }

    void swap(int &n, int &m) {
        int temp = n;
        n = m;
        m = temp;
    }
};
