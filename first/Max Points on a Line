/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    int maxPoints(vector<Point> &points) {
        if (points.size() == 0) {
            return 0;
        }
        int max = 1;
        for(int i = 0; i < points.size(); i++) {
            map<double, int> slope;
            map<double, int>::iterator it;
            int vertical = 1;
            int same = -1;
            for(int j = 0; j < points.size(); j++) {
                if (points[i].x == points[j].x && points[i].y == points[j].y) {
                    same++;
                } else if (i != j && points[i].y != points[j].y) {
                    double p = double(points[i].x - points[j].x)/double(points[i].y - points[j].y);
                    it = slope.find(p);
                    if (it == slope.end()) {
                        slope.insert({{p,2}});
                    } else {
                        it->second ++;
                    }
                } else if (i != j && points[i].y == points[j].y) {
                    vertical ++;
                }
            }
            for(it = slope.begin(); it != slope.end(); it++) {
                if (it->second + same > max) {
                    max = it->second + same;
                }
            }
            if (vertical+same > max) {
                max = vertical + same;
            }
        }
        return max;
    }
};
